module t001
using Random
using SparseArrays
using SimplySparse
using Test
using UnicodePlots

function test()
    Random.seed!(614317)
    (I, J, V) = ([34, 55, 80, 85, 96, 125, 112, 67, 57, 32, 36, 69, 2, 81, 115, 38, 63, 80, 96, 15, 31, 9, 20, 108, 88, 100, 12, 41, 20, 58, 28, 29, 56, 69, 90, 106, 117, 125, 87, 32, 117, 7, 90, 108, 33, 54, 61, 64, 73, 117, 82, 44, 20, 50, 122, 25, 105, 24,
    6, 43, 37, 99, 123, 100, 2, 79, 22, 82, 16, 22, 115, 67, 90, 115, 125, 32, 36, 7, 42, 114, 16, 58, 5, 98, 72, 122, 23, 7, 47, 86, 13, 70, 98, 124, 3, 110, 112, 80, 122, 8, 12, 62, 91, 94, 124, 73, 92, 34, 4, 25, 96, 25, 67, 83, 117, 113, 22, 59, 54, 72, 25, 8, 17, 78, 8, 35, 74, 81, 101, 118, 69, 80, 37, 20, 67, 83, 86, 62, 125, 29, 87, 93, 45, 90, 117, 9, 33, 47, 34, 92, 38, 44, 52, 66, 107, 40, 107, 63, 84, 111, 3, 27, 74, 38, 61, 77, 113, 45, 16, 113, 118, 40, 31, 95, 100, 55, 75, 15, 36, 71, 99, 115, 101, 31, 103, 104, 116, 27, 52, 2, 22, 90, 67, 82, 8, 18, 27, 60, 122, 61, 77, 3, 46, 33, 34, 78, 25, 74, 91, 28, 37, 73, 41, 43,
    65, 82, 115, 1, 10, 32, 64, 37, 87, 105, 125, 30, 53, 16, 118, 126, 32, 82, 114, 12, 1, 127, 29, 72, 94, 1, 56, 44, 24, 113, 27, 20, 64, 109, 126, 32, 105, 21, 36, 44, 69, 17, 18, 42, 124, 106, 109, 121, 74, 94, 15, 21, 66, 89, 18, 85, 111, 42, 9, 54, 118, 42, 16, 19, 38, 78, 98, 4, 13, 40, 122, 122, 14, 49, 96, 110, 82, 96, 120, 18, 42, 54, 115, 53, 76, 23, 24, 103, 40, 17, 47, 101, 54, 90, 16, 32, 81, 43, 94, 122, 112, 14, 36, 39, 93, 28, 57, 121, 18, 88, 9, 65, 66, 100, 114, 1, 114, 119, 54, 56, 119, 14, 38, 37, 59, 89, 43, 85, 112, 38, 63, 121, 83, 85, 4, 49, 61, 105, 11, 8, 20, 43, 67, 12, 35, 39, 55, 62, 119, 25, 41, 92, 8, 10, 35, 41, 75, 92, 30, 91, 114, 5, 44, 63, 74, 96, 127, 53, 68, 72, 76, 89, 51, 74, 97, 46, 80, 121, 99, 108, 16, 49, 76, 28, 95, 27, 43, 25, 101, 39, 110, 118, 29, 3, 39, 112, 11, 20, 45, 96, 41, 63, 80, 85, 100, 1, 15, 57, 84, 3, 96, 29, 112, 22, 65, 106, 16, 92, 96, 7, 83, 115, 37, 84], [1, 2, 2, 2, 2, 2, 3, 6, 7, 8, 8, 8, 9, 9, 9, 10, 11, 12, 12, 13, 13, 14, 14, 14, 15, 18, 20,
    21, 23, 23, 24, 24, 24, 25, 26, 26, 26, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 36, 37, 37, 38, 40, 40, 41, 42,
    42, 46, 46, 46, 47, 48, 49, 50, 50, 51, 51, 52, 53, 53, 54, 54, 55, 55, 56, 56, 56, 57, 57, 58, 58, 59, 59, 60, 62, 62, 62, 63,
    63, 63, 63, 65, 65, 65, 66, 66, 67, 67, 67, 67, 67, 67, 69, 69, 70, 71, 71, 71, 72, 72, 72, 72, 74, 75, 75, 76, 76, 77, 78, 78,
    79, 80, 80, 80, 81, 81, 81, 82, 82, 83, 84, 84, 84, 84, 85, 85, 86, 86, 86, 88, 88, 88, 89, 89, 90, 91, 91, 93, 93, 93, 93, 93,
    94, 94, 96, 97, 97, 98, 99, 99, 100, 101, 102, 102, 104, 106, 106, 106, 107, 110, 110, 110, 111, 112, 113, 113, 113, 113, 113, 114, 115, 115, 115, 115, 116, 116, 117, 120, 120, 122, 122, 123, 123, 123, 123, 123, 126, 126, 127, 1, 2, 2, 2, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 15, 15, 16, 16, 16, 17, 17, 18, 19, 19, 20, 21, 21,
    21, 21, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 28, 29, 31, 32, 32, 33, 34, 34, 35, 36, 37, 37, 37, 38, 39, 39, 39,
    39, 39, 40, 40, 40, 40, 41, 42, 43, 43, 43, 44, 46, 46, 47, 47, 47, 47, 48, 48, 49, 49, 49, 50, 51, 51, 51, 52, 52, 54, 54, 54,
    55, 55, 55, 56, 57, 57, 57, 57, 58, 58, 59, 60, 60, 61, 61, 61, 61, 61, 62, 63, 63, 64, 65, 66, 67, 69, 70, 70, 70, 71, 72, 72,
    73, 73, 73, 74, 74, 75, 75, 75, 75, 77, 78, 79, 79, 79, 81, 83, 83, 83, 83, 85, 87, 87, 87, 88, 89, 89, 89, 89, 89, 90, 90, 90,
    91, 92, 92, 92, 92, 93, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 97, 98, 98, 99, 100, 100, 101, 101, 102, 102, 104, 104, 105, 105, 105, 106, 108, 108, 108, 110, 110, 110, 111, 113, 113, 113, 113, 113, 115, 115, 115, 115, 116, 116, 118, 118, 119, 119, 119, 121, 122, 122, 123, 124, 124, 125, 125], [9.53581e-01, 6.74196e-01, 8.54306e-01, 1.64189e-01, 9.68120e-01, 7.52104e-01, 4.24139e-01, 3.45868e-01, 7.77872e-01, 4.79488e-01, 3.53091e-01, 5.86445e-01, 9.11472e-01, 7.09913e-01, 2.35147e-02, 5.27441e-02, 7.30454e-01, 1.73848e-01, 7.70443e-01, 9.22474e-01, 4.32402e-01, 3.61659e-01, 1.64973e-01, 6.05550e-01, 2.87120e-01, 4.54101e-01, 7.06220e-01, 7.65838e-01, 2.21805e-02, 3.80255e-01, 9.45028e-01, 8.77736e-01, 6.58704e-01, 1.98092e-01, 5.62727e-01, 5.71769e-01, 7.58500e-01, 2.32088e-01, 4.16950e-01, 4.26989e-01, 4.42932e-01, 2.56041e-01, 5.52634e-01, 7.14354e-01, 1.52212e-01, 8.24685e-01, 5.66723e-02, 8.75602e-01, 1.27068e-01, 9.49709e-01, 7.74068e-01, 5.64003e-01, 8.63864e-01, 1.48330e-01, 2.39250e-01, 2.31629e-01, 9.48969e-02, 2.76043e-01, 6.73609e-01, 6.62823e-01, 8.34802e-01, 3.14157e-01, 5.44922e-01, 2.81376e-01, 7.43412e-01, 7.95430e-01, 9.41795e-01, 5.17258e-01, 9.33457e-01, 5.13947e-02, 5.64251e-01, 1.89396e-01, 7.34269e-01, 6.78620e-01, 4.63224e-01, 2.05862e-01, 4.63754e-01, 1.08699e-01, 7.11560e-01, 3.08936e-02, 3.58668e-01, 3.27328e-01, 9.36630e-01, 2.72201e-01, 5.29171e-01, 3.98651e-01, 4.48206e-01, 3.32135e-01, 1.35518e-01, 8.76994e-02, 3.22149e-01, 4.09112e-02, 2.84794e-01, 9.28118e-01, 8.14494e-02, 9.65524e-01, 5.35663e-01, 5.64428e-02, 2.14975e-01, 5.39864e-01, 9.09732e-01, 5.59305e-01, 1.48963e-01, 1.82797e-01, 2.19162e-01, 5.63991e-01, 4.35686e-01, 7.12964e-01, 9.18641e-01, 1.46006e-01, 5.29845e-01, 1.58341e-01, 9.84536e-01, 2.18022e-01, 8.75956e-01,
    8.83971e-01, 1.87930e-01, 8.59602e-01, 3.27865e-01, 2.28215e-01, 5.75253e-01, 3.47715e-01, 1.84609e-01, 5.47847e-01, 4.38005e-01, 7.09628e-01, 6.87321e-01, 2.86987e-01, 9.85845e-01, 6.73067e-01, 9.44438e-02, 6.88267e-01, 8.13763e-01, 9.27630e-01, 3.59376e-01, 2.62575e-01, 2.27262e-01, 6.07495e-01, 8.44378e-01, 6.86814e-01, 7.80780e-01, 1.94370e-01, 7.30227e-01, 3.15595e-01, 6.10695e-01, 6.63622e-01, 7.11386e-01, 4.31860e-01, 4.98589e-01, 1.44724e-02, 2.46588e-01, 7.28114e-02, 7.14730e-01, 7.73428e-01, 4.50573e-01, 6.14199e-01, 9.40008e-01, 9.75602e-01, 2.74315e-01, 8.08783e-01, 3.90100e-01, 7.55058e-02, 7.02168e-01, 1.41986e-01, 2.50569e-01, 6.47704e-01, 3.30822e-01, 2.68704e-01, 5.74195e-01, 9.15009e-01, 6.13582e-01, 8.71423e-01, 3.58381e-01, 2.49430e-01, 4.47617e-01, 1.63542e-01, 7.17142e-01, 7.69771e-02, 7.44686e-01, 7.58519e-01, 1.38380e-01, 4.64789e-01, 6.88720e-01, 3.16716e-01, 9.42256e-01, 9.90904e-01, 9.54369e-01, 5.95536e-01, 1.54812e-01, 6.46429e-01, 4.32786e-01, 1.58868e-01, 8.88725e-01, 5.76574e-01, 9.16527e-01, 5.99598e-01, 7.96268e-02, 9.49384e-01, 2.80949e-01, 8.76083e-01, 3.80270e-01, 2.50629e-01, 2.94499e-01, 9.90853e-01, 3.61542e-01, 9.93155e-01, 8.19958e-01, 1.92607e-01, 6.48457e-01, 3.40954e-01, 6.16368e-01, 1.88999e-01, 1.28369e-01, 3.76222e-02, 4.97063e-01, 9.06771e-02, 5.77905e-01, 1.57117e-01, 1.94095e-01, 5.57837e-01, 1.25331e-04, 3.47199e-01, 5.63643e-01, 6.99139e-01, 6.48730e-01, 4.72766e-01, 2.91701e-01, 6.81031e-01, 4.15799e-01, 2.52748e-01, 6.15320e-01, 8.86383e-01, 9.35820e-01, 2.59278e-01, 8.41317e-01, 9.15070e-01, 1.59663e-01, 5.99300e-01, 8.67775e-01, 3.88268e-01, 2.58754e-01, 5.03691e-01, 2.84316e-01,
    9.71410e-01, 2.27839e-01, 4.38097e-01, 7.70246e-01, 6.35923e-01, 6.08938e-01, 6.19618e-01, 5.40711e-01, 8.61252e-01, 6.72865e-01, 2.65871e-01, 7.34255e-01, 6.65373e-01, 3.90859e-01, 4.72080e-01, 8.50480e-01, 9.97395e-01, 9.97802e-01, 6.28027e-02, 7.56836e-01, 3.69366e-01, 9.32313e-01, 9.39176e-01, 5.38401e-01, 2.40012e-01, 7.24054e-02, 1.12256e-01, 9.71251e-01, 3.14079e-01, 2.49828e-02, 1.18487e-01, 9.90181e-01, 9.66560e-01, 6.56761e-01, 9.94697e-01, 1.57620e-01, 9.10582e-01, 7.83041e-01, 2.56867e-02, 7.21788e-01, 5.56431e-01, 1.66464e-01, 1.02562e-02, 5.17212e-01, 3.87442e-01, 4.75902e-01, 9.94391e-01, 3.60467e-01, 1.36509e-02, 7.12600e-01, 8.23070e-01, 3.11944e-01, 4.45268e-01, 3.79273e-01, 9.11616e-01, 6.62097e-01, 4.93083e-01, 3.26494e-01, 3.65419e-01, 2.58991e-01, 1.41373e-01, 4.72722e-01, 9.00759e-01, 9.83352e-01, 8.44303e-01, 9.65092e-01, 4.64148e-01, 3.35572e-01, 2.53103e-01, 2.44561e-01, 3.60249e-01, 8.25330e-01, 3.53958e-01, 2.98288e-01, 3.83128e-01, 5.38006e-01, 9.39340e-01, 9.18679e-02, 8.39841e-01, 8.81023e-01, 5.10375e-01, 5.07784e-01, 9.86319e-01, 5.19284e-01, 3.08100e-01, 1.01531e-01, 6.10833e-01, 4.37117e-01, 6.09203e-01, 6.38892e-02, 3.82774e-01, 2.40788e-01, 5.08030e-01, 8.17739e-01, 2.91371e-01, 9.53682e-01, 1.69075e-01, 8.88493e-01, 3.95971e-01, 4.83759e-01, 7.96970e-01, 9.63759e-01, 5.18448e-01, 4.90345e-01, 7.48273e-01, 2.02199e-01, 7.29125e-01, 4.67408e-02, 6.77309e-01, 6.13273e-01, 1.94624e-01, 8.76281e-01, 7.29436e-01, 2.99636e-01, 4.10306e-01, 2.47307e-01, 3.66410e-01, 6.21491e-01, 7.57709e-01, 4.13611e-01, 7.67483e-01, 2.78989e-03, 1.32977e-01, 9.11362e-01, 1.98182e-02, 4.62417e-01, 5.91667e-01, 3.41800e-01,
    9.38139e-01, 2.41744e-03, 2.87887e-01, 2.86635e-01, 9.26122e-01, 5.11459e-01, 3.64248e-01, 8.50751e-01, 6.91057e-01, 4.00033e-01, 2.15450e-01, 9.09887e-01, 8.62054e-01, 2.32881e-01, 3.73397e-01, 5.30948e-01, 9.45684e-02, 3.20314e-01, 1.68767e-01, 1.13435e-01, 6.48318e-01, 8.68348e-01, 3.89409e-01, 6.94280e-01, 7.35530e-01, 2.12962e-01, 3.88396e-01, 2.38733e-01, 4.15026e-01, 9.76828e-01, 2.62593e-01, 2.13626e-01, 5.26245e-01, 2.74159e-02, 7.10441e-01, 2.74029e-01, 2.47230e-01, 8.46888e-01, 3.26268e-01, 3.58400e-01, 1.70279e-02, 6.06884e-01, 4.12471e-01, 1.72526e-01, 4.73901e-01, 7.74339e-01, 3.85537e-01, 1.75250e-01, 6.73076e-01, 1.94622e-01, 6.80323e-01, 7.62747e-02, 2.97401e-02, 2.90535e-01, 6.42613e-02, 5.79046e-01, 7.75290e-01, 3.80842e-01, 9.26543e-01, 4.53796e-01, 1.89028e-03, 8.97282e-01, 5.82403e-01, 7.56411e-01, 3.26540e-01, 9.46861e-01, 1.65029e-01])
    for N  in [127]
        ntries = 1
        for _ in 1:ntries
            # @show N
            # A = sprand(N, N, 20 * rand() / N)
            # I1, J1, V1 = findnz(A)
            # A = sprand(N, N, 30 * rand() / N)
            # I2, J2, V2 = findnz(A)

            # # I = cat(I1, I2, dims=1)
            # # J = cat(J1, J2, dims=1)
            # # V = cat(V1, V2, dims=1)
            # @time A = let
                A = sparse(I, J, V, N, N)
            # end

            # I = cat(I1, I2, dims=1)
            # J = cat(J1, J2, dims=1)
            # V = cat(V1, V2, dims=1)
            # @show I, J, V


            @time B = let
                B = SimplySparse.par_sparse(I, J, V, N, N)
                # display(spy(B, canvas=DotCanvas))
            end

            # I = cat(I1, I2, dims=1)
            # J = cat(J1, J2, dims=1)
            # V = cat(V1, V2, dims=1)
            # @time C = let
            #     C = SimplySparse.sparse(I, J, V, N, N)
            #     # display(spy(C, canvas=DotCanvas))
            # end

            @show A - B
            @show A - C
            nothing
        end
    end
    nothing
end

test()
nothing

end # module

# module t001
# using Random
# using SparseArrays
# using SimplySparse
# using ProfileView
# using Test

# function test()
#     for N  in [631578, ]
#         ntries = 1
#         for _ in 1:ntries
#             @show N
#             A = sprand(N, N, 100 * rand() / N)
#             I1, J1, V1 = findnz(A)
#             A = sprand(N, N, 200 * rand() / N)
#             I2, J2, V2 = findnz(A)

#             I = cat(I1, I2, dims=1)
#             J = cat(J1, J2, dims=1)
#             V = cat(V1, V2, dims=1)
#             @time let
#                 A = sparse(I, J, V, N, N)
#             end
#             A = nothing
#             GC.gc()

#             I = cat(I1, I2, dims=1)
#             J = cat(J1, J2, dims=1)
#             V = cat(V1, V2, dims=1)
#             @time let
#                 B = SimplySparse.sparse(I, J, V, N, N)
#                 @profview B = SimplySparse.sparse(I, J, V, N, N)

#             end
#             B = nothing
#             GC.gc()

#         end
#     end
#     nothing
# end

# test()
# nothing

# end # module

# function _countingsortperm!(perm, counts, data)
#     for i in eachindex(data) # @inbounds
#         j = data[i]
#         counts[j] += 1
#     end

#     for i in 2:length(counts) # @inbounds
#         counts[i] = counts[i] + counts[i - 1]
#     end

#     for i in lastindex(data):-1:firstindex(data) # @inbounds
#         j = data[i]
#         k = counts[j]
#         perm[k] = i
#         counts[j] -= 1
#     end
#     return nothing
# end

# function _sort!(arr)
# # Sorting using a single loop
#     j = 0
#     while true
#         j += 1
#         (j > length(arr)-1) && break
# # Checking the condition for two simultaneous elements of the array
#         if (arr[j] > arr[j + 1])
# # Swapping the elements.
#             temp = arr[j];
#             arr[j] = arr[j + 1];
#             arr[j + 1] = temp;
# # updating the value of j = -1 so after getting updated for j++ in the loop it
# # becomes 0 and the loop begins from the start.
#             j = 0;
#         end
#     end
#     return arr;
# end

# module t008
# function _sortperm!(perm, arr)
# # Sorting using a single loop
#     j = 0
#     while true
#         j += 1
#         (j > length(arr)-1) && break
#         if (arr[j] > arr[j + 1])
#             # Swapping the elements.
#             temp = arr[j];
#             arr[j] = arr[j + 1];
#             arr[j + 1] = temp;
#             temp = perm[j];
#             perm[j] = perm[j + 1];
#             perm[j + 1] = temp;
#             # so that after update the loop begins from the start.
#             j = 0;
#         end
#     end
#     return perm;
# end

# using BenchmarkTools
# data = [
# 15140
#  57938
#    404
#  19884
#  48345
#   1698
#    524
#  36170
#  59967
#  29684
#  62501
#  29673
#  11843
#  48039
#    524
#  36170
#  59967
#  29684
#  32069
#   7373
#  35366]
#  data = vcat(data, data, data)

# perm = collect(1:length(data))
# x = deepcopy(data)
# p = deepcopy(perm)

#  # @btime begin x .= data; _sort!(x); end
#  @btime begin x .= data; p .= perm; _sortperm!(p, x); end
#  @btime begin x .= data; sort!(x); end
#  @btime begin x .= data; sort!(p, Base.Sort.DEFAULT_UNSTABLE, Base.Order.Perm(Base.Order.Forward, x)); end
# nothing
# end

# #  counts = fill(0, maximum(data)+1)
# #  perm = collect(1:length(data))
# x .= data; p .= perm; _sortperm!(p, x); @show p
# data[p] == x


#  _countingsortperm!(perm, counts, data)

#  @show perm
# @show data[perm]
# counts[data] .= 0
# @show sum(counts)


# module t001
# using Random
# using SparseArrays
# using SimplySparse
# using ProfileView
# using DataDrop
# using Test

# function testA()
#     I = DataDrop.retrieve_matrix("I.h5")
#     J = DataDrop.retrieve_matrix("J.h5")
#     V = DataDrop.retrieve_matrix("V.h5")
#     N = 1328319

#     @time let
#         A = sparse(I, J, V, N, N)
#     end
# end
# function testB()
#     I = DataDrop.retrieve_matrix("I.h5")
#     J = DataDrop.retrieve_matrix("J.h5")
#     V = DataDrop.retrieve_matrix("V.h5")
#     N = 1328319

#     @time let
#         @profview        B = SimplySparse.sparse(I, J, V, N, N)
#         # @show nnz(B)
#     end
# end

# testA()
# ## testA()
# testB()
# # testB()

# nothing

# end # module


    # module t001
    # using Random
    # using SparseArrays
    # using SimplySparse
    # using ProfileView
    # using Test

    # function test()
    #     ntries = 1
    #     # for _ in 1:ntries
    #     #     for N  in [12, ]
    #     #         @show N
    #     #         A = sprand(N, N, 0.3)
    #     #         I1, J1, V1 = findnz(A)
    #     #         A = sprand(N, N, 0.7)
    #     #         I2, J2, V2 = findnz(A)

    #     #         I = cat(I1, I2, dims=1)
    #     #         J = cat(J1, J2, dims=1)
    #     #         V = cat(V1, V2, dims=1)
    #     #         @show I, J, V

    #     #         B = SimplySparse.sparse(I, J, V, N, N)

    #     #     end
    #     # end
    #     N = 12
    #     (I, J, V) = ([1, 1, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12], [2, 3, 1, 5, 9, 11, 2, 1, 4, 8, 9, 1, 3, 4, 7, 8, 10, 3, 5, 6, 8, 11, 1, 4, 7, 10, 11, 1, 2, 3, 4, 5, 9, 12, 7, 8,
    #     5, 6, 9, 12, 5, 7, 11, 12, 1, 3, 6, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 1, 2, 4, 6, 7, 8, 10, 12, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12,  1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 1, 2, 3, 5, 7, 8, 9, 11, 12, 1, 2, 4, 5, 7, 9, 10, 11, 12, 1, 4, 6, 7, 8, 11, 1, 2, 3, 6, 7, 10, 11, 12, 3, 5, 6, 7, 9, 10, 12, 2, 3, 4, 5, 7, 9, 10, 11, 12, 1, 2, 3, 4, 5, 8, 11, 12], [7.34541e-01, 3.79205e-01, 3.10559e-01, 1.89196e-01, 5.02568e-01, 8.71701e-01, 5.07631e-01, 9.20705e-01, 1.00559e-01, 5.40836e-01, 7.98029e-01, 2.39612e-01, 8.21467e-01, 8.39167e-01, 9.35728e-01, 3.81726e-01, 7.09849e-01, 3.74736e-01, 5.46708e-01, 3.57350e-01, 8.33607e-01, 9.73897e-01, 5.19343e-01, 8.88829e-01, 2.04298e-01, 6.76946e-01, 2.33848e-01, 4.01331e-01, 2.32622e-01, 9.31044e-01, 5.81856e-01, 4.02288e-01, 6.32099e-02, 5.38391e-01, 9.52544e-01, 7.89291e-01, 2.64078e-01, 3.80723e-01, 7.91680e-01, 7.22894e-01, 1.26045e-01, 5.51714e-01, 1.51864e-02, 7.56613e-01, 5.19834e-01, 8.19176e-01, 1.03291e-01, 9.44283e-01, 5.39432e-01, 8.13954e-01, 6.11897e-01, 5.97695e-01, 9.83576e-01, 2.55639e-01, 8.59856e-01, 1.88421e-01, 4.70798e-01, 8.78104e-01, 8.42733e-01, 1.70173e-01, 1.25848e-01, 3.45855e-02, 8.02016e-02, 3.41804e-01, 7.53995e-01, 2.25891e-01, 7.05785e-01, 8.81775e-01, 2.76650e-01, 6.41885e-01, 4.47554e-01, 4.36233e-01, 2.42341e-01, 3.69906e-01, 1.37225e-01, 5.46043e-01, 8.77275e-01, 8.56452e-01, 8.36087e-01, 3.69421e-01, 4.16663e-01, 2.43876e-01, 8.35690e-01, 7.31361e-01, 6.13043e-02, 3.11421e-01, 8.36708e-01, 6.50448e-01, 5.36828e-01, 5.74137e-01, 1.09374e-01, 6.18298e-01, 6.90447e-01, 1.52608e-01, 7.91031e-01, 2.10818e-01, 8.85300e-01, 3.72425e-01, 8.10336e-01, 2.74992e-01, 7.83801e-02, 8.43886e-01, 6.83286e-01, 1.41830e-01, 7.60970e-01, 4.93709e-01, 4.35611e-01, 3.59794e-02, 7.88401e-01, 5.30044e-01,
    #     1.05079e-01, 4.13622e-01, 7.56162e-01, 6.95105e-01, 3.02221e-01, 5.13967e-01, 6.06776e-01, 9.84795e-01, 1.15254e-01, 8.04268e-01, 4.95615e-01, 3.58455e-01, 6.32448e-01, 5.53014e-01, 1.80003e-01, 9.00692e-01, 2.01465e-01, 5.94034e-01, 1.38014e-01, 3.67868e-01, 5.52147e-01, 9.14473e-01, 1.08158e-01, 8.68587e-01, 1.09116e-01, 4.93053e-01, 5.05353e-01, 8.82375e-01, 6.50712e-01, 2.09775e-01, 8.35552e-01, 8.78878e-01, 1.83486e-02, 2.59980e-01, 3.51839e-01, 4.86591e-01, 7.45851e-01, 7.83441e-01, 2.13515e-01, 9.63249e-01, 3.70507e-01, 2.79614e-01])
    #     @show sort(J)
    #     B = SimplySparse.sparse(I, J, V, N, N)
    #     nothing
    # end

    # test()
    # nothing

    # end # module




# function test()
#     ntries = 1
#     # for _ in 1:ntries
#     #     for N  in [12, ]
#     #         @show N
#     #         A = sprand(N, N, 0.3)
#     #         I1, J1, V1 = findnz(A)
#     #         A = sprand(N, N, 0.7)
#     #         I2, J2, V2 = findnz(A)

#     #         I = cat(I1, I2, dims=1)
#     #         J = cat(J1, J2, dims=1)
#     #         V = cat(V1, V2, dims=1)
#     #         @show I, J, V

#     #         B = SimplySparse.sparse(I, J, V, N, N)

#     #     end
#     # end
#     (Nr, Nc) = (4, 1)
#     (I, J, V) = ([1, 2, 3, 1, 2, 4], [1, 1, 1, 1, 1, 1], [0.6976804523441354, 0.1730260193308485, 0.33524886657616804, 0.7699142576510188, 0.8495482510000932, 0.5539873737363903])
#     B = SimplySparse.sparse(I, J, V, Nr, Nc)
#     nothing
# endd

# test()

# module mt001
# using BenchmarkTools
# const v = rand(100_000);

# const p = zeros(Int, 100_000);
# const s = similar(p)

# @btime sortperm!($p, $v; scratch=$s);
# # @show p
# @btime begin $p .= 1:length($v); sort!($p, Base.Sort.DEFAULT_UNSTABLE, Base.Order.Perm(Base.Order.Forward, $v)); end
# @btime begin $p .= 1:length($v);  end
# nothing
# end
# # @show p

# nothing

# end # module


# module mt002
# using BenchmarkTools
# const N = 10
# const v = rand(N);

# const p = zeros(Int, N);
# const s = similar(p)

# @btime begin $p .= 1:length($v); sortperm!($p, $v; initialized=true, scratch=$s); end
# @btime begin $p .= 1:length($v); sort!($p; alg=Base.Sort.DEFAULT_UNSTABLE, order=Base.Order.Perm(Base.Order.Forward, $v), scratch=$s); end
# @btime begin $p .= 1:length($v);  end

# nothing
# end
# # @show p
